1.1) The two programs run very similarly, but handle the possible exception of the string being larger than 10 in different ways. In over1, gets is used which can be dangerous because it is deprecated. In over2, it is checked if the string that is input is actually 10 in order to decrease overflow risk.

1.2) The thing that causes the risk of buffer overflow in the program is that there is no check in order to see if the user put in numbers that are less than or eqaul to 10 strings long. If the number the user puts in is larger than 10, then there will not be enough space in the char array that it is being stored within.

1.3) A rule of thumb in order to identify risk of buffer overflow is just to simply check if the input amount is less than or eqaul to the amount of space that has been allocated to the certain variable you plan on storing such input to.

1.4) In over4, the person who coded it simply took the first 9 numbers that the user put in, and only displayed that information whiile not worrying about the other numbers that were put in. So the lesson here is that you should sometimes manipulate information in order to fit it into certain variables that have been created. 

1.5) When I tried to run my program with letters that within the amount of memory allocated for each variable, it ran fine. With that said, as soon as it was more memory than I allocated, it gave a segmentation fault. 

2.1) main : 0x40069c 
	i : 0x7fffd09d5fac
	j:  0x7fffd09d5fcc
	k:  0x7fffd09d5fa8
	buf: 0x7fffd09d5fac

2.2) It seems that within decode.s, the parameters of i and j have been passed into the stack in the order from left to right (i.e i was stored first, and then j was stored after that). Then, the paramters a, b, c, and d are all stored and then the jump to test is made once that is done.

2.3) Using the first method of counting the instructions from main up until test is called, I counted that there were 17 lines. Now if I multiply that by 4, I get 68. This is my number of bytes in tens. If I convert it to hex, I get 44. Now if I add it to the address I believe that the main is at, I get, 0x40069c + 0x44 =  0x4006E0

2.4) For these, I am going left to right when thinking of the byte groupings 
	First byte in hex : 0x0
	Second byte in hex : 0x0
	Third byte in hex : 0x0
	Fourth byte in hex : 0xb

2.5) We are in a big endian processor because the largest byte is within the last address

2.6) In order to discover in the future what endian processor I am using, I plan on looking at the individual bytes of whatever is in question for the processor being used. If I see that the most significant byte is in the last address, I know that it is a big endian process. If the least significant byte is at the lowest address, then I know that it is a little endian process.

2.7) Drew the stack frame on a piece of paper because I am not sure how to draw one on this. I can email it if needed.

2.8) The varible k can be overwritten and given said arbitrary address

2.9) This piece of data will end up in the stack segment.

2.10) There are times when the processor can execute code that is not within the text segment. It cannot manipulate data within the text segments because they are read only/

2.11) One piece of evidence that buf is now within the data segment is when I noticed that it is within a higher place in memory as compared to the buf that is within decode-run.txt.

2.12) It is not possible to force the program to jump to an arbitrary address for this situation. Reason being that the address is within the stack, while buf is within the data segment. Them being in two different segments does not make it possible for the address to be changed. 

3.1) The reason that conact is an insecure program is because buf has a certain length, and then further along within the program, there is no check to make sure that the everything put within it is actually less than the allocated space given for it. This can lead to buffer overflow since the number of memory allocated to it can be easily surpassed.

3.2) The general experience that I am getting from this lab is that the mistake a person can make to elad to stack smashing attacks is not shortening information given to a size that will fit within variables that have an allocated size associated with them. If this is not checked and done, it can lead to an buffer overflow, and thus lead to the program not running as one might expect, and possibly not run at all.

3.3) Sending concat_safe.c
